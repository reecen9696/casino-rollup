use super::groth16::{G1Point, G2Point, Groth16VerifyingKey};
use crate::VerifierError;
use anchor_lang::prelude::*;

/// Embedded verifying key for the ZK Casino circuit
/// This key is generated from the prover setup and embedded at compile time
pub const VERIFYING_KEY_BYTES: &[u8] = &[
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x26, 0x95, 0x8b, 0x18, 0x65, 0x8e, 0x04, 0x25,
    0xca, 0x8b, 0xa0, 0xa4, 0x12, 0xd2, 0xf6, 0x09, 0xfe, 0x4b, 0xdf, 0x83, 0xc4, 0xa1, 0x1f, 0x08,
    0x18, 0x6c, 0x7e, 0x22, 0x80, 0xd7, 0xd5, 0xd6, 0x35, 0x5b, 0x83, 0x3b, 0x8f, 0x93, 0x66, 0x80,
    0xed, 0xe7, 0xf5, 0x24, 0x6d, 0x93, 0x2e, 0x2f, 0x7c, 0xd1, 0x5b, 0x62, 0x5b, 0xb8, 0xeb, 0x0d,
    0x07, 0xfc, 0x8b, 0x04, 0x0e, 0x80, 0xea, 0x23, 0x1a, 0x9c, 0x4d, 0xac, 0x0a, 0xc5, 0x19, 0xfb,
    0xdf, 0x10, 0xba, 0x78, 0x5b, 0x54, 0x72, 0x8a, 0xbb, 0x77, 0x96, 0xa5, 0xeb, 0xa4, 0x6e, 0x66,
    0x1b, 0x0a, 0x63, 0xf3, 0x9e, 0x3b, 0x63, 0x64, 0xb2, 0x5f, 0x0b, 0x79, 0x1d, 0x82, 0x44, 0x64,
    0x13, 0xe5, 0x9c, 0x8b, 0x33, 0x70, 0xcd, 0x89, 0x66, 0xdf, 0x8b, 0x8d, 0xd0, 0x9a, 0x05, 0xf1,
    0xc0, 0x84, 0xf9, 0xac, 0x48, 0x1d, 0x6a, 0x53, 0x55, 0x7d, 0x04, 0xc3, 0x93, 0xc2, 0x84, 0xf7,
    0x26, 0x11, 0x95, 0xe3, 0x9d, 0xb9, 0x54, 0x67, 0x29, 0x9b, 0x92, 0xac, 0xa0, 0x45, 0x8f, 0x47,
    0x42, 0x3f, 0x86, 0x18, 0x21, 0x87, 0xe2, 0x43, 0xfe, 0x1b, 0x4a, 0x5c, 0xc1, 0x66, 0x5d, 0xd2,
    0x91, 0xf8, 0x8f, 0xc1, 0x39, 0xbf, 0x9e, 0x15, 0x59, 0xaf, 0x0a, 0xc4, 0xda, 0xe8, 0x9e, 0x97,
    0xe8, 0x89, 0x25, 0x2d, 0x8b, 0xc5, 0x1f, 0x5f, 0x49, 0xe6, 0x98, 0xe8, 0x83, 0x08, 0x28, 0x6c,
    0xa5, 0x73, 0xe6, 0xef, 0xab, 0x93, 0x33, 0x03, 0x36, 0x17, 0x2d, 0xc3, 0xe6, 0x07, 0x13, 0x19,
    0xc1, 0xb0, 0x8f, 0x25, 0x68, 0x95, 0xc8, 0xbc, 0xf6, 0xd2, 0x15, 0x9f, 0x61, 0x93, 0x9b, 0x28,
    0xbd, 0x0d, 0x10, 0xaa, 0xc0, 0x5d, 0x2d, 0xe1, 0xee, 0xf1, 0x06, 0x7b, 0x52, 0xac, 0x73, 0xea,
    0x77, 0x33, 0x81, 0x25, 0x60, 0xfe, 0xf6, 0x8b, 0x20, 0x45, 0x88, 0x63, 0x6d, 0xe5, 0x43, 0x95,
    0xa9, 0xbe, 0x85, 0x8f, 0x1a, 0x7e, 0x9a, 0xef, 0x68, 0x0a, 0xa7, 0x12, 0x2a, 0xfe, 0x60, 0xcb,
    0xae, 0xe0, 0x02, 0xaf, 0x87, 0xb0, 0xf2, 0xb9, 0xa1, 0x4b, 0x38, 0x7e, 0xf1, 0xab, 0x5e, 0x75,
    0xb8, 0x85, 0x2e, 0x7a, 0x89, 0x43, 0xd0, 0xca, 0x79, 0xe8, 0x24, 0x15, 0x93, 0xa9, 0x02, 0x4a,
    0xdd, 0x76, 0x0b, 0x3c, 0x6c, 0x02, 0xb2, 0x63, 0xbf, 0xaa, 0xaa, 0x9c, 0x3c, 0x65, 0x9c, 0xf7,
    0x01, 0xa9, 0x13, 0x33, 0x56, 0xd5, 0xa1, 0x13, 0xc4, 0x82, 0x02, 0xa9, 0xd3, 0xaa, 0x9a, 0x03,
    0x85, 0xfe, 0x40, 0x77, 0xa5, 0x76, 0x01, 0x91, 0xe3, 0xd6, 0xb8, 0x98, 0xc7, 0xf6, 0xaa, 0xca,
    0x48, 0xfc, 0xc3, 0xfb, 0xef, 0x6b, 0xaf, 0xb9, 0xda, 0xac, 0xa5, 0x96, 0x53, 0x91, 0x70, 0xa6,
    0x18, 0x18, 0x1c, 0xbf, 0x5c, 0x0e, 0x9c, 0x38, 0x39, 0x59, 0x5f, 0xd7, 0x4a, 0x4f, 0xa8, 0x8c,
    0x6c, 0x72, 0xf2, 0xba, 0xa5, 0xe6, 0x11, 0xb8, 0x5c, 0xc7, 0x9b, 0x76, 0x2d, 0x9d, 0x7d, 0xd0,
    0x4e, 0x6f, 0x1c, 0x4f, 0x53, 0xb3, 0x52, 0x43, 0x9c, 0x5e, 0xe8, 0x97, 0xaf, 0x84, 0xb5, 0xc4,
    0xbf, 0x26, 0xb5, 0x12, 0x0c, 0xeb, 0xb5, 0xa3, 0x3a, 0x38, 0x03, 0x30, 0x1e, 0x9c, 0xa3, 0x18,
    0xd4, 0x3a, 0x10, 0xc7, 0x84, 0x58, 0x44, 0x1c, 0x73, 0x11, 0xda, 0xb7, 0x80, 0x84, 0x0f, 0x46,
    0x50, 0x5b, 0x78, 0x16, 0xf1, 0x57, 0x35, 0x60, 0xcd, 0xa9, 0x84, 0xc7, 0xd1, 0x82, 0xca, 0xf4,
    0x08, 0xc4, 0xa5, 0xce, 0xd3, 0xe9, 0x49, 0xfb, 0xb6, 0xc1, 0xcc, 0xac, 0x2a, 0xf0, 0xc7, 0x50,
    0x13, 0x25, 0xa5, 0xc0, 0xf7, 0xf9, 0x64, 0xe3, 0x4e, 0xf6, 0x05, 0xe1, 0x49, 0x4e, 0x04, 0xaa,
    0xa6, 0xf4, 0xc2, 0x8a, 0x38, 0x0f, 0xf4, 0x84, 0x97, 0x48, 0xb4, 0xe8, 0x2e, 0x6b, 0x86, 0x7a,
    0xef, 0xe0, 0x02, 0x1c, 0xd1, 0xa5, 0xd8, 0x0a, 0x05, 0x2d, 0x20, 0xc5, 0xbf, 0x5f, 0x93, 0xa4,
    0x3d, 0x0a, 0x2a, 0xc3, 0xef, 0xaa, 0x34, 0xb0, 0x78, 0x85, 0x48, 0x9f, 0x58, 0xae, 0xd7, 0x11,
    0xcb, 0x8a, 0x58, 0x26, 0xec, 0x86, 0xc6, 0x14, 0x37, 0x52, 0x96, 0x3f, 0x58, 0x77, 0x18, 0x86,
    0x2d, 0xeb, 0x62, 0x55, 0x52, 0x67, 0xe7, 0x1e, 0x5c, 0xf0, 0x10, 0x56, 0xaf, 0xd8, 0xa1, 0x58,
    0x89, 0x07, 0xab, 0x87, 0xf2, 0x0e, 0x0d, 0x51, 0x2d, 0xc9, 0x99, 0x21, 0x70, 0xc2, 0x56, 0x03,
];

/// Parse the embedded verifying key bytes into a Groth16VerifyingKey structure
pub fn get_embedded_verifying_key() -> Result<Groth16VerifyingKey> {
    msg!("Loading embedded verifying key");

    if VERIFYING_KEY_BYTES.len() < 288 {
        // Minimum size: alpha(64) + beta(128) + gamma(128) + delta(128) + at least 1 IC(64) = 512 bytes
        // But arkworks compressed format is smaller
        return Err(VerifierError::InvalidVerifyingKey.into());
    }

    let mut offset = 0;

    // Parse alpha (G1 point - 64 bytes)
    let alpha = G1Point {
        x: VERIFYING_KEY_BYTES[offset..offset + 32].try_into().unwrap(),
        y: VERIFYING_KEY_BYTES[offset + 32..offset + 64]
            .try_into()
            .unwrap(),
    };
    offset += 64;

    // Parse beta (G2 point - 128 bytes)
    let beta = G2Point {
        x: VERIFYING_KEY_BYTES[offset..offset + 64].try_into().unwrap(),
        y: VERIFYING_KEY_BYTES[offset + 64..offset + 128]
            .try_into()
            .unwrap(),
    };
    offset += 128;

    // Parse gamma (G2 point - 128 bytes)
    let gamma = G2Point {
        x: VERIFYING_KEY_BYTES[offset..offset + 64].try_into().unwrap(),
        y: VERIFYING_KEY_BYTES[offset + 64..offset + 128]
            .try_into()
            .unwrap(),
    };
    offset += 128;

    // Parse delta (G2 point - 128 bytes)
    let delta = G2Point {
        x: VERIFYING_KEY_BYTES[offset..offset + 64].try_into().unwrap(),
        y: VERIFYING_KEY_BYTES[offset + 64..offset + 128]
            .try_into()
            .unwrap(),
    };
    offset += 128;

    // Parse IC points (multiple G1 points)
    // For our circuit, we expect 2 IC points: IC[0] and IC[1] (for 1 public input)
    let mut ic = Vec::new();

    // IC[0]
    if offset + 64 <= VERIFYING_KEY_BYTES.len() {
        ic.push(G1Point {
            x: VERIFYING_KEY_BYTES[offset..offset + 32].try_into().unwrap(),
            y: VERIFYING_KEY_BYTES[offset + 32..offset + 64]
                .try_into()
                .unwrap(),
        });
        offset += 64;
    }

    // IC[1]
    if offset + 64 <= VERIFYING_KEY_BYTES.len() {
        ic.push(G1Point {
            x: VERIFYING_KEY_BYTES[offset..offset + 32].try_into().unwrap(),
            y: VERIFYING_KEY_BYTES[offset + 32..offset + 64]
                .try_into()
                .unwrap(),
        });
        offset += 64;
    }

    if ic.len() < 2 {
        msg!("Error: Insufficient IC points in verifying key");
        return Err(VerifierError::InvalidVerifyingKey.into());
    }

    msg!("âœ“ Verifying key loaded: {} IC points", ic.len());

    Ok(Groth16VerifyingKey {
        alpha,
        beta,
        gamma,
        delta,
        ic,
    })
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_embedded_verifying_key_parsing() {
        let vk = get_embedded_verifying_key().unwrap();

        // Check that we have the expected structure
        assert_eq!(vk.ic.len(), 2); // IC[0] and IC[1] for 1 public input

        // Verify points are not zero (basic sanity check)
        assert_ne!(vk.alpha.x, [0u8; 32]);
        assert_ne!(vk.alpha.y, [0u8; 32]);
        assert_ne!(vk.beta.x, [0u8; 64]);
        assert_ne!(vk.beta.y, [0u8; 64]);
    }

    #[test]
    fn test_verifying_key_size() {
        // Ensure we have enough bytes for the expected structure
        assert!(VERIFYING_KEY_BYTES.len() >= 576); // Minimum for full key
    }
}
